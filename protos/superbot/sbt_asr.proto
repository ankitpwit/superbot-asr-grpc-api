syntax = "proto3";

package superbot.asr;
option go_package = "superbot/asr";

option cc_enable_arenas = true;

service SuperbotSpeechRecognition {

    rpc Recognize(RecognizeRequest) returns (RecognizeResponse) {}
   
    rpc StreamingRecognize(stream StreamingRecognizeRequest) returns (stream StreamingRecognizeResponse) {}
}

message RecognizeRequest {

    RecognitionConfig config = 1;

    bytes audio = 2;
}

message StreamingRecognizeRequest {

    oneof streaming_request {
       
        StreamingRecognitionConfig streaming_config = 1;

        bytes audio_content = 2;
    }
}

message RecognitionConfig {
    
    AudioEncoding encoding = 1;

    int32 sample_rate_hertz = 2;

    string language_code = 3;

    string dur_type = 4;

    string request_id = 5;

  	int32 audio_channel_count = 6;

  	bool enable_separate_recognition_per_channel = 7;

    string model = 8;

    SpeakerDiarizationConfig diarization_config = 9;

    string silence_duration = 10;
}

message StreamingRecognitionConfig {

    RecognitionConfig config = 1;

    bool interim_results = 2;
}

message SpeakerDiarizationConfig {
  
    bool enable_speaker_diarization = 1;

    int32 max_speaker_count = 2;
}

message RecognizeResponse {

    repeated SpeechRecognitionResult results = 1;
}

message SpeechRecognitionResult {

    repeated SpeechRecognitionAlternative alternatives = 1;

    int32 channel_tag = 2;

    string detected_lang = 3;

    float audio_processed = 4;

    bool vad_detected = 5;

    float inference_time = 6;

    float wpm = 7;
}

message SpeechRecognitionAlternative {

    string transcript = 1;

    float confidence = 2;

    repeated WordInfo words = 3;
}

message WordInfo {

    string word = 1;

    float confidence = 2;

    int32 speaker_tag = 3;
}

message StreamingRecognizeResponse {

    repeated StreamingRecognitionResult results = 1;
}

message StreamingRecognitionResult {
 
    repeated SpeechRecognitionAlternative alternatives = 1;

    bool is_final = 2;

    int32 channel_tag = 3;

    string detected_lang = 4;

    float audio_processed = 5;

    bool vad_detected = 6;

    float inference_time = 7;

    float wpm = 8;
}


enum AudioEncoding {

    ENCODING_UNSPECIFIED = 0;

    LINEAR_PCM = 1;

    FLAC = 2;

    MULAW = 3;

    OGGOPUS = 4;

    ALAW = 20;
}
